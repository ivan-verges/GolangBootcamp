// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: grpc/proto/answer.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	//codes "google.golang.org/grpc/codes"
	//status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnswersClient is the client API for Answers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnswersClient interface {
	GetAnswer(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Answer, error)
	GetUserWithQuestionsAndAnswers(ctx context.Context, in *Input, opts ...grpc.CallOption) (*UserQuestionsAnswers, error)
}

type answersClient struct {
	cc grpc.ClientConnInterface
}

func NewAnswersClient(cc grpc.ClientConnInterface) AnswersClient {
	return &answersClient{cc}
}

func (c *answersClient) GetAnswer(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/grpc.Answers/GetAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answersClient) GetUserWithQuestionsAndAnswers(ctx context.Context, in *Input, opts ...grpc.CallOption) (*UserQuestionsAnswers, error) {
	out := new(UserQuestionsAnswers)
	err := c.cc.Invoke(ctx, "/grpc.Answers/GetUserWithQuestionsAndAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnswersServer is the server API for Answers service.
// All implementations must embed UnimplementedAnswersServer
// for forward compatibility
type AnswersServer interface {
	GetAnswer(context.Context, *Input) (*Answer, error)
	GetUserWithQuestionsAndAnswers(context.Context, *Input) (*UserQuestionsAnswers, error)
	//mustEmbedUnimplementedAnswersServer()
}

// UnimplementedAnswersServer must be embedded to have forward compatible implementations.
//type UnimplementedAnswersServer struct {
//}

//func (UnimplementedAnswersServer) GetAnswer(context.Context, *Input) (*Answer, error) {
//	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
//}
//func (UnimplementedAnswersServer) GetUserWithQuestionsAndAnswers(context.Context, *Input) (*UserQuestionsAnswers, error) {
//	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithQuestionsAndAnswers not implemented")
//}
//func (UnimplementedAnswersServer) mustEmbedUnimplementedAnswersServer() {}

// UnsafeAnswersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnswersServer will
// result in compilation errors.
//type UnsafeAnswersServer interface {
//	mustEmbedUnimplementedAnswersServer()
//}

func RegisterAnswersServer(s grpc.ServiceRegistrar, srv AnswersServer) {
	s.RegisterService(&Answers_ServiceDesc, srv)
}

func _Answers_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswersServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Answers/GetAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswersServer).GetAnswer(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Answers_GetUserWithQuestionsAndAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswersServer).GetUserWithQuestionsAndAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Answers/GetUserWithQuestionsAndAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswersServer).GetUserWithQuestionsAndAnswers(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

// Answers_ServiceDesc is the grpc.ServiceDesc for Answers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Answers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Answers",
	HandlerType: (*AnswersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnswer",
			Handler:    _Answers_GetAnswer_Handler,
		},
		{
			MethodName: "GetUserWithQuestionsAndAnswers",
			Handler:    _Answers_GetUserWithQuestionsAndAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/answer.proto",
}
